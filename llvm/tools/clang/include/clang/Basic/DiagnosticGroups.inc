
#ifdef GET_DIAG_ARRAYS
static const char DiagSubGroup0[] = { 23, -1 };
static const short DiagArray1[] = { diag::pp_hash_warning, -1 };
static const char DiagSubGroup4[] = { 54, 67, -1 };
static const short DiagArray7[] = { diag::pp_redef_builtin_macro, -1 };
static const short DiagArray12[] = { diag::warn_subscript_is_char, -1 };
static const short DiagArray13[] = { diag::escaped_newline_block_comment_end, diag::ext_bcpl_comment, diag::ext_multi_line_bcpl_comment, diag::warn_nested_block_comment, -1 };
static const short DiagArray14[] = { diag::warn_impcast_complex_scalar, diag::warn_impcast_float_integer, diag::warn_impcast_float_precision, diag::warn_impcast_integer_precision, diag::warn_impcast_vector_scalar, -1 };
static const char DiagSubGroup14[] = { 78, -1 };
static const short DiagArray17[] = { diag::warn_deprecated, -1 };
static const short DiagArray21[] = { diag::warn_empty_if_body, -1 };
static const char DiagSubGroup22[] = { 24, -1 };
static const char DiagSubGroup23[] = { 75, 79, 110, -1 };
static const short DiagArray24[] = { diag::ext_pp_extra_tokens_at_eol, -1 };
static const short DiagArray25[] = { diag::warn_floatingpoint_eq, -1 };
static const short DiagArray26[] = { diag::warn_printf_asterisk_precision_wrong_type, diag::warn_printf_asterisk_width_wrong_type, diag::warn_printf_format_string_contains_null_char, diag::warn_printf_format_string_is_wide_literal, diag::warn_printf_insufficient_data_args, diag::warn_printf_invalid_conversion, diag::warn_printf_missing_format_string, -1 };
static const char DiagSubGroup26[] = { 27, 31, 61, -1 };
static const short DiagArray27[] = { diag::warn_printf_too_many_data_args, -1 };
static const short DiagArray28[] = { diag::warn_printf_nonliteral, -1 };
static const char DiagSubGroup28[] = { 29, -1 };
static const short DiagArray29[] = { diag::warn_printf_nonliteral_noargs, diag::warn_printf_write_back, -1 };
static const char DiagSubGroup29[] = { 26, -1 };
static const char DiagSubGroup30[] = { 26, -1 };
static const short DiagArray31[] = { diag::warn_printf_empty_format_string, -1 };
static const char DiagSubGroup32[] = { 28, 29, 30, -1 };
static const short DiagArray33[] = { diag::ext_four_char_character_literal, -1 };
static const short DiagArray34[] = { diag::warn_condition_is_idiomatic_assignment, -1 };
static const char DiagSubGroup35[] = { 36, 37, -1 };
static const short DiagArray36[] = { diag::ext_implicit_function_decl, diag::warn_implicit_function_decl, -1 };
static const short DiagArray37[] = { diag::ext_missing_type_specifier, -1 };
static const short DiagArray42[] = { diag::warn_falloff_noreturn_function, diag::warn_noreturn_function_has_return_expr, -1 };
static const short DiagArray43[] = { diag::warn_offsetof_non_pod_type, -1 };
static const short DiagArray45[] = { diag::ext_longlong, -1 };
static const short DiagArray46[] = { diag::warn_struct_class_tag_mismatch, -1 };
static const short DiagArray52[] = { diag::warn_suggest_noreturn_block, diag::warn_suggest_noreturn_function, -1 };
static const short DiagArray53[] = { diag::warn_missing_prototype, -1 };
static const char DiagSubGroup54[] = { 13, 26, 35, 46, 55, 74, 94, 96, 102, 103, 111, 112, 114, 115, 73, 12, -1 };
static const short DiagArray55[] = { diag::ext_multichar_character_literal, -1 };
static const char DiagSubGroup58[] = { 79, 14, -1 };
static const short DiagArray59[] = { diag::warn_cannot_pass_non_pod_arg_to_vararg, -1 };
static const short DiagArray61[] = { diag::warn_null_arg, -1 };
static const short DiagArray67[] = { diag::warn_condition_is_assignment, diag::warn_precedence_bitwise_rel, -1 };
static const char DiagSubGroup67[] = { 34, -1 };
static const short DiagArray68[] = { diag::ext_gnu_ptr_func_arith, diag::ext_gnu_void_ptr, diag::ext_sizeof_function_type, diag::ext_sizeof_void_type, -1 };
static const short DiagArray69[] = { diag::ext_typecheck_convert_incompatible_pointer_sign, -1 };
static const short DiagArray71[] = { diag::warn_objc_property_attr_mutually_exclusive, -1 };
static const short DiagArray73[] = { diag::warn_base_initialized, diag::warn_field_initialized, -1 };
static const short DiagArray74[] = { diag::ext_return_has_expr, diag::ext_return_missing_expr, diag::warn_falloff_nonvoid_function, diag::warn_maybe_falloff_nonvoid_function, diag::warn_return_missing_expr, -1 };
static const short DiagArray75[] = { diag::warn_semicolon_before_method_body, -1 };
static const short DiagArray78[] = { diag::warn_impcast_integer_64_32, -1 };
static const short DiagArray79[] = { diag::warn_mixed_sign_comparison, diag::warn_mixed_sign_conditional, -1 };
static const short DiagArray93[] = { diag::ext_typecheck_base_super, -1 };
static const short DiagArray96[] = { diag::trigraph_converted, diag::trigraph_ends_block_comment, diag::trigraph_ignored, diag::trigraph_ignored_block_comment, -1 };
static const short DiagArray98[] = { diag::warn_redefinition_of_typedef, -1 };
static const short DiagArray99[] = { diag::warn_unavailable, -1 };
static const short DiagArray100[] = { diag::warn_undeclared_selector, -1 };
static const short DiagArray101[] = { diag::warn_pp_undef_identifier, -1 };
static const short DiagArray102[] = { diag::warn_field_is_uninit, -1 };
static const short DiagArray103[] = { diag::ext_stdc_pragma_ignored, diag::ext_stdc_pragma_syntax, diag::ext_stdc_pragma_syntax_eom, diag::warn_pragma_diagnostic_clang_cannot_ppp, diag::warn_pragma_diagnostic_clang_invalid, diag::warn_pragma_diagnostic_gcc_invalid, diag::warn_pragma_diagnostic_invalid_option, diag::warn_pragma_diagnostic_invalid_token, diag::warn_pragma_diagnostic_unknown_warning, diag::warn_pragma_ignored, diag::warn_stdc_fenv_access_not_supported, -1 };
static const short DiagArray104[] = { diag::warn_unknown_warning_option, -1 };
static const char DiagSubGroup105[] = { 106, 107, 108, 110, 111, 112, -1 };
static const short DiagArray109[] = { diag::pp_macro_not_used, -1 };
static const short DiagArray110[] = { diag::warn_unused_parameter, -1 };
static const short DiagArray111[] = { diag::warn_unused_call, diag::warn_unused_expr, diag::warn_unused_property_expr, -1 };
static const short DiagArray112[] = { diag::warn_unused_variable, -1 };
static const short DiagArray113[] = { diag::ext_named_variadic_macro, diag::ext_variadic_macro, -1 };
static const short DiagArray114[] = { diag::warn_incompatible_vectors, -1 };
#endif // GET_DIAG_ARRAYS


#ifdef GET_DIAG_TABLE
  { "",                              0, DiagSubGroup0 },
  { "#warnings",                     DiagArray1, 0 },
  { "address",                       0, 0 },
  { "aggregate-return",              0, 0 },
  { "all",                           0, DiagSubGroup4 },
  { "attributes",                    0, 0 },
  { "bad-function-cast",             0, 0 },
  { "builtin-macro-redefined",       DiagArray7, 0 },
  { "c++-compat",                    0, 0 },
  { "cast-align",                    0, 0 },
  { "cast-qual",                     0, 0 },
  { "char-align",                    0, 0 },
  { "char-subscripts",               DiagArray12, 0 },
  { "comment",                       DiagArray13, 0 },
  { "conversion",                    DiagArray14, DiagSubGroup14 },
  { "ctor-dtor-privacy",             0, 0 },
  { "declaration-after-statement",   0, 0 },
  { "deprecated-declarations",       DiagArray17, 0 },
  { "disabled-optimization",         0, 0 },
  { "discard-qual",                  0, 0 },
  { "div-by-zero",                   0, 0 },
  { "empty-body",                    DiagArray21, 0 },
  { "endif-labels",                  0, DiagSubGroup22 },
  { "extra",                         0, DiagSubGroup23 },
  { "extra-tokens",                  DiagArray24, 0 },
  { "float-equal",                   DiagArray25, 0 },
  { "format",                        DiagArray26, DiagSubGroup26 },
  { "format-extra-args",             DiagArray27, 0 },
  { "format-nonliteral",             DiagArray28, DiagSubGroup28 },
  { "format-security",               DiagArray29, DiagSubGroup29 },
  { "format-y2k",                    0, DiagSubGroup30 },
  { "format-zero-length",            DiagArray31, 0 },
  { "format=2",                      0, DiagSubGroup32 },
  { "four-char-constants",           DiagArray33, 0 },
  { "idiomatic-parentheses",         DiagArray34, 0 },
  { "implicit",                      0, DiagSubGroup35 },
  { "implicit-function-declaration", DiagArray36, 0 },
  { "implicit-int",                  DiagArray37, 0 },
  { "import",                        0, 0 },
  { "init-self",                     0, 0 },
  { "inline",                        0, 0 },
  { "int-to-pointer-cast",           0, 0 },
  { "invalid-noreturn",              DiagArray42, 0 },
  { "invalid-offsetof",              DiagArray43, 0 },
  { "invalid-pch",                   0, 0 },
  { "long-long",                     DiagArray45, 0 },
  { "mismatched-tags",               DiagArray46, 0 },
  { "missing-braces",                0, 0 },
  { "missing-declarations",          0, 0 },
  { "missing-field-initializers",    0, 0 },
  { "missing-format-attribute",      0, 0 },
  { "missing-include-dirs",          0, 0 },
  { "missing-noreturn",              DiagArray52, 0 },
  { "missing-prototypes",            DiagArray53, 0 },
  { "most",                          0, DiagSubGroup54 },
  { "multichar",                     DiagArray55, 0 },
  { "nested-externs",                0, 0 },
  { "newline-eof",                   0, 0 },
  { "non-gcc",                       0, DiagSubGroup58 },
  { "non-pod-varargs",               DiagArray59, 0 },
  { "non-virtual-dtor",              0, 0 },
  { "nonnull",                       DiagArray61, 0 },
  { "nonportable-cfstrings",         0, 0 },
  { "old-style-definition",          0, 0 },
  { "overflow",                      0, 0 },
  { "overloaded-virtual",            0, 0 },
  { "packed",                        0, 0 },
  { "parentheses",                   DiagArray67, DiagSubGroup67 },
  { "pointer-arith",                 DiagArray68, 0 },
  { "pointer-sign",                  DiagArray69, 0 },
  { "pointer-to-int-cast",           0, 0 },
  { "readonly-setter-attrs",         DiagArray71, 0 },
  { "redundant-decls",               0, 0 },
  { "reorder",                       DiagArray73, 0 },
  { "return-type",                   DiagArray74, 0 },
  { "semicolon-before-method-body",  DiagArray75, 0 },
  { "sequence-point",                0, 0 },
  { "shadow",                        0, 0 },
  { "shorten-64-to-32",              DiagArray78, 0 },
  { "sign-compare",                  DiagArray79, 0 },
  { "strict-aliasing",               0, 0 },
  { "strict-aliasing=0",             0, 0 },
  { "strict-aliasing=1",             0, 0 },
  { "strict-aliasing=2",             0, 0 },
  { "strict-overflow",               0, 0 },
  { "strict-overflow=0",             0, 0 },
  { "strict-overflow=1",             0, 0 },
  { "strict-overflow=2",             0, 0 },
  { "strict-overflow=3",             0, 0 },
  { "strict-overflow=4",             0, 0 },
  { "strict-overflow=5",             0, 0 },
  { "strict-prototypes",             0, 0 },
  { "strict-selector-match",         0, 0 },
  { "super-class-method-mismatch",   DiagArray93, 0 },
  { "switch",                        0, 0 },
  { "synth",                         0, 0 },
  { "trigraphs",                     DiagArray96, 0 },
  { "type-limits",                   0, 0 },
  { "typedef-redefinition",          DiagArray98, 0 },
  { "unavailable-declarations",      DiagArray99, 0 },
  { "undeclared-selector",           DiagArray100, 0 },
  { "undef",                         DiagArray101, 0 },
  { "uninitialized",                 DiagArray102, 0 },
  { "unknown-pragmas",               DiagArray103, 0 },
  { "unknown-warning-option",        DiagArray104, 0 },
  { "unused",                        0, DiagSubGroup105 },
  { "unused-argument",               0, 0 },
  { "unused-function",               0, 0 },
  { "unused-label",                  0, 0 },
  { "unused-macros",                 DiagArray109, 0 },
  { "unused-parameter",              DiagArray110, 0 },
  { "unused-value",                  DiagArray111, 0 },
  { "unused-variable",               DiagArray112, 0 },
  { "variadic-macros",               DiagArray113, 0 },
  { "vector-conversions",            DiagArray114, 0 },
  { "volatile-register-var",         0, 0 },
  { "write-strings",                 0, 0 },
#endif // GET_DIAG_TABLE

